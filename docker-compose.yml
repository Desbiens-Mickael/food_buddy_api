version: "3.8"

# services:
#   db:
#     build:
#       context: .
#       dockerfile: Dockerfile.db
#     image: mickael01/bdd_postgres_food_buddy
#     restart: always
#     environment:
#       POSTGRES_DB: ${DATABASE_NAME}
#       PGUSER: ${DATABASE_USERNAME}
#       POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
#     ports:
#       - 5432:5432
#     env_file:
#       - .env
#     networks:
#       - backend_network
#     healthcheck:
#       test: ["CMD-SHELL", "pg_isready"]
#       interval: 10s
#       timeout: 5s
#       retries: 5
#     volumes:
#       - postgres_data:/var/lib/postgresql/data

#   backend:
#     build:
#       context: .
#     image: mickael01/food_buddy_api_springboot
#     environment:
#       SPRING_PROFILES_ACTIVE: docker
#       SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/${DATABASE_NAME}
#       SPRING_DATASOURCE_USERNAME: ${DATABASE_USERNAME}
#       SPRING_DATASOURCE_PASSWORD: ${DATABASE_PASSWORD}
#       SPRING_JPA_SHOW_SQL: ${SHOW_SQL}
#       JWT_SECRET: ${JWT_SECRET}
#       JWT_EXPIRATION: ${JWT_EXPIRATION}
#     depends_on:
#       db:
#         condition: service_healthy
#     ports:
#       - "8080:8080"
#     env_file:
#       - .env
#     networks:
#       - backend_network

# networks:
#   backend_network:

# volumes:
#   postgres_data:

# Pour utiliser springboot avec postgres sans docker juste pour la bdd
services:
  db:
    image: postgres:14-alpine
    restart: always
    environment:
      POSTGRES_PASSWORD: postgres
      PGUSER: postgres
    ports:
      - 5432:5432
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
